<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetLibrary.Utilities</name>
    </assembly>
    <members>
        <member name="T:DotNetLibrary.Utilities.Configuration.ConfigurationSections.CustomAppSettingsConfigurationSection">
            <summary>
            This class represents a custom application settings configuration section. 
            This is slightly better than the build in application settings because each item now includes a "description"
            property which is great for documenting the property. 
            </summary>
            <example>
            <configuration>
                <configSections>
                    <section name="customAppSettings" type="DotNetLibrary.Utilities.Configuration.ConfigurationSections.CustomAppSettingsConfigurationSection,DotNetLibrary.Utilities, Version=1.0.0.0, Culture=neutral" allowLocation="true" allowDefinition="Everywhere"/>
                </configSections>
                <customAppSettings description="This section contains custom application settings such as URLs of web services.">
                    <applicationProperties>
                        <add name = "SearchUrl" value="http://www.google.com?search=computers" description="Contains the search URL for the websites search section." />
                        <add name = "MailServerPort" value="38" description="This is the port of the mail server in the network." />
                    </applicationProperties>
               </customAppSettings>
            </configuration>
            </example>
        </member>
        <member name="P:DotNetLibrary.Utilities.Configuration.ConfigurationSections.CustomAppSettingsConfigurationSection.Description">
            <summary>
            This is the description attribute of the custom application settings configuration section
            </summary>
        </member>
        <member name="P:DotNetLibrary.Utilities.Configuration.ConfigurationSections.CustomAppSettingsConfigurationSection.CustomConfigurations">
            <summary>
            Returns a collection of application configuration properties
            </summary>
        </member>
        <member name="T:DotNetLibrary.Utilities.Configuration.ConfigurationSections.DatabaseConfigurationSection">
            <summary>
            This class allows us to create a new custome database configuration section in the configuration file. 
            </summary>
            <example>
            <configuration>
                <configSections>
                    <section name="databasePropertiesSettings" type="DotNetLibrary.Utilities.Configuration.ConfigurationSections.DatabaseConfigurationSection,DotNetLibrary.Utilities, Version=1.0.0.0, Culture=neutral" allowLocation="true" allowDefinition="Everywhere"/>
                </configSections>
                <databasePropertiesSettings description="This section contains configuration information about our database such as Stored Procedure names.">
                    <databaseProperties>
                        <add name = "OrganisationHierarchyListStoredProcedure" value="Tsa_org_Hierarchy_Export" description="Lists TSA organisation hierarchy." />
                        <add name = "MaximumNumberOfItemstoReturnFromAllQueries" value="300000" description="This limits the maximum number of items that can be returned by some stored procedures. It's to stop clients from requesting too much data and crashing our servers." />
                    </databaseProperties>
               </databasePropertiesSettings>
            </configuration>
            </example>
        </member>
        <member name="P:DotNetLibrary.Utilities.Configuration.ConfigurationSections.DatabaseConfigurationSection.Description">
            <summary>
            This is the description attibute of the database configuration section
            </summary>
        </member>
        <member name="P:DotNetLibrary.Utilities.Configuration.ConfigurationSections.DatabaseConfigurationSection.CustomConfigurations">
            <summary>
            Returns a collection of database configuration properties
            </summary>
        </member>
        <member name="T:DotNetLibrary.Utilities.Configuration.CustomConfigurationSettings">
            <summary>
             This class allows us to read configuration properties from the custom configuration sections in our config file.
            </summary>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.CustomConfigurationSettings.#ctor">
            <summary>
            Default constructor - reads the custom configuration sections from the config file and has it ready for use
            </summary>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.CustomConfigurationSettings.GetConfigurationElementByName(System.String,DotNetLibrary.Utilities.Configuration.CustomSections)">
            <summary>
            Searches for a configuration element by name key from the configuration section.
            </summary>
            <param name="name">The Value of the "name" attribute in one of the child nodes of the custom configuration section.</param>
            <param name="section">The custom configuration section we are interested in.</param>
            <returns>An CustomConfigurationElement whose name key Value matches the supplied name</returns>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.CustomConfigurationSettings.GetElementValueByName(System.String,DotNetLibrary.Utilities.Configuration.CustomSections)">
            <summary>
            Searches for a CustomConfigurationElement by key from the config section and returns the Value attribute of that element
            </summary>
            <param name="uniqueKey">The key of the the child node we are interested in.</param>
            <param name="section">The custom configuration section we are interested in.</param>
            <returns>The Value attribute of the node which matches the key we are interested in.</returns>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.CustomConfigurationSettings.GetElementValueAsIntByName(System.String,DotNetLibrary.Utilities.Configuration.CustomSections)">
            <summary>
            Searches for a CustomConfigurationElement by key from the config section and returns the Value attribute of that element as an int
            </summary>
            <param name="uniqueKey">The key of the the child node we are interested in.</param>
            <param name="section">The custom configuration section we are interested in.</param>
            <returns>An integer converted from the Value attribute of the node which matches the key we are interested in.</returns>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.CustomConfigurationSettings.GetElementDescriptionByName(System.String,DotNetLibrary.Utilities.Configuration.CustomSections)">
            <summary>
            Searches for a CustomConfigurationElement by key from the config section and returns the Description attribute of that element
            </summary>
            <param name="uniqueKey">The key of the the child node we are interested in.</param>
            <param name="section">The custom configuration section we are interested in.</param>
            <returns>The Description attribute value of the node which matches the key we are interested in.</returns>
        </member>
        <member name="T:DotNetLibrary.Utilities.Configuration.CustomSections">
            <summary>
            A enum which lists the available custom sections in our application
            </summary>
        </member>
        <member name="F:DotNetLibrary.Utilities.Configuration.CustomSections.Database">
            <summary>
            Teh database custom section.
            </summary>
        </member>
        <member name="F:DotNetLibrary.Utilities.Configuration.CustomSections.AppSettings">
            <summary>
            the AppSettings custom section
            </summary>
        </member>
        <member name="T:DotNetLibrary.Utilities.Configuration.Elements.CustomConfigurationElement">
            <summary>
            Represents a custom node that can be used to contain custom settings. 
            </summary>
        </member>
        <member name="P:DotNetLibrary.Utilities.Configuration.Elements.CustomConfigurationElement.Name">
            <summary>
            Name attribute. This is the Key
            </summary>
        </member>
        <member name="P:DotNetLibrary.Utilities.Configuration.Elements.CustomConfigurationElement.Value">
            <summary>
            Value attribute
            </summary>
        </member>
        <member name="P:DotNetLibrary.Utilities.Configuration.Elements.CustomConfigurationElement.Description">
            <summary>
            Description attribute. Very useful for documenting the node
            </summary>
        </member>
        <member name="T:DotNetLibrary.Utilities.Configuration.Elements.CustomConfigurationElementCollection">
            <summary>
            Represents a collection of custom configuration properties
            </summary>
        </member>
        <member name="P:DotNetLibrary.Utilities.Configuration.Elements.CustomConfigurationElementCollection.Item(System.Int32)">
            <summary>
            Indexer to return a specific element
            </summary>
            <param name="index">The index of the element in the collection</param>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.Elements.CustomConfigurationElementCollection.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.Elements.CustomConfigurationElementCollection.Remove(DotNetLibrary.Utilities.Configuration.Elements.CustomConfigurationElement)">
            <summary>
            Removes the element from the collection.
            </summary>
            <param name="customConfigurationElement"></param>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.Elements.CustomConfigurationElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an element at a given index.
            </summary>
            <param name="index">The index of the element in the collection.</param>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.Elements.CustomConfigurationElementCollection.Remove(System.String)">
            <summary>
            Removes an element by name from the collection.
            </summary>
            <param name="name">the key of the element</param>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.Elements.CustomConfigurationElementCollection.CreateNewElement">
            <summary>
            Creates a new element
            </summary>
            <returns>Returns the newley created element.</returns>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.Elements.CustomConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns an elemnt's key from the collection
            </summary>
            <param name="element">The element we are interested in.</param>
            <returns></returns>
        </member>
        <member name="T:DotNetLibrary.Utilities.Configuration.ICustomConfigurationSettings">
            <summary>
            Interface for interacting with a custom configuration section
            </summary>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.ICustomConfigurationSettings.GetElementValueByName(System.String,DotNetLibrary.Utilities.Configuration.CustomSections)">
            <summary>
            Searches for a CustomConfigurationElement by key from the config section and returns the Value attribute of that element
            </summary>
            <param name="uniqueKey">The key of the the child node we are interested in.</param>
            <param name="section">The custom configuration section we are interested in.</param>
            <returns>The Value attribute of the node which matches the key we are interested in.</returns>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.ICustomConfigurationSettings.GetElementValueAsIntByName(System.String,DotNetLibrary.Utilities.Configuration.CustomSections)">
            <summary>
            Searches for a CustomConfigurationElement by key from the config section and returns the Value attribute of that element as an int
            </summary>
            <param name="uniqueKey">The key of the the child node we are interested in.</param>
            <param name="section">The custom configuration section we are interested in.</param>
            <returns>An integer converted from the Value attribute of the node which matches the key we are interested in.</returns>
        </member>
        <member name="M:DotNetLibrary.Utilities.Configuration.ICustomConfigurationSettings.GetElementDescriptionByName(System.String,DotNetLibrary.Utilities.Configuration.CustomSections)">
            <summary>
            Searches for a CustomConfigurationElement by key from the config section and returns the Description attribute of that element
            </summary>
            <param name="uniqueKey">The key of the the child node we are interested in.</param>
            <param name="section">The custom configuration section we are interested in.</param>
            <returns>The Description attribute value of the node which matches the key we are interested in.</returns>
        </member>
        <member name="T:DotNetLibrary.Utilities.Tools.DateFormat">
            <summary>
            Class that contains date formats constants 
            </summary>
        </member>
        <member name="F:DotNetLibrary.Utilities.Tools.DateFormat.BritishWithSlashSparator">
            <summary>
            British date format using slash as separator (dd/MM/yyyy) e.g. 23/06/1977 
            </summary>
        </member>
        <member name="F:DotNetLibrary.Utilities.Tools.DateFormat.BritishWithHyphenSeparator">
            <summary>
            British date format using hyphen as separator (dd-MM-yyyy) e.g. 23-06-1977
            </summary>
        </member>
        <member name="F:DotNetLibrary.Utilities.Tools.DateFormat.AmericanTwoDigitsYearWithSlashSparator">
            <summary>
            American date format with two digits for the year using slash separator (MM/dd/yy) e.g 01/23/61 
            </summary>
        </member>
        <member name="F:DotNetLibrary.Utilities.Tools.DateFormat.AmericanTwoDigitsYearWithHyphenSparator">
            <summary>
            American date format with two digits for the year using hyphen separator (MM-dd-yy) e.g 01-23-61 
            </summary>
        </member>
        <member name="F:DotNetLibrary.Utilities.Tools.DateFormat.AmericanFourDigitsYearWithSlashSparator">
            <summary>
            American date format with four digits for the year using slash separator (MM/dd/yyyy) e.g 01/23/1961 
            </summary>
        </member>
        <member name="F:DotNetLibrary.Utilities.Tools.DateFormat.AmericanFourDigitsYearWithHyphenSparator">
            <summary>
            American date format with four digits for the year using hyphen separator (MM-dd-yyyy) e.g 01-23-1961 
            </summary>
        </member>
        <member name="T:DotNetLibrary.Utilities.Tools.Error">
            <summary>
            A utitlity class to help with error handling
            </summary>
        </member>
        <member name="M:DotNetLibrary.Utilities.Tools.Error.ArgumentNull(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetLibrary.Utilities.Tools.Error.ErrorOrigin">
            <summary>
            The origin of the error
            </summary>
        </member>
        <member name="F:DotNetLibrary.Utilities.Tools.Error.ErrorOrigin.Database">
            <summary>
            Error that originated from database
            </summary>
        </member>
        <member name="F:DotNetLibrary.Utilities.Tools.Error.ErrorOrigin.EntityFrameworkValidationFailure">
            <summary>
             Error that originated from Entity Framework entity validation failure
            </summary>
        </member>
        <member name="F:DotNetLibrary.Utilities.Tools.Error.ErrorOrigin.FileAccessFailure">
            <summary>
             Error that originated from trying to access a file
            </summary>
        </member>
        <member name="F:DotNetLibrary.Utilities.Tools.Error.ErrorOrigin.Other">
            <summary>
             Any other unspecified error
            </summary>
        </member>
        <member name="M:DotNetLibrary.Utilities.Tools.Error.BuildExceptionDetail(System.Exception,System.Text.StringBuilder)">
            <summary>
                Returns full details about an Exception object
            </summary>
            <param name="ex">The Exception object which was thrown when the error occurred</param>
            <param name="sb">A string builder object to build the final error message string</param>
            <returns>A string builder object which contains the final error message</returns>
        </member>
        <member name="T:DotNetLibrary.Utilities.Tools.Extensions.DateTimeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNetLibrary.Utilities.Tools.Extensions.DateTimeExtensions.ParseBritishDateFromString(System.DateTime,System.String)">
            <summary>
            Constructs a British DateTime instance by parsing a string that contains the date e.g 19/11/2008 or 19/11/08 etc
            </summary>
            <param name="dateTime">The type we are extending with this method</param>
            <param name="dateString">The string to parse in order to build the date</param>
            <returns>A nullable DateTime instance</returns>
        </member>
        <member name="M:DotNetLibrary.Utilities.Tools.Extensions.DateTimeExtensions.ParseBritishDateFromAmericanDateString(System.DateTime,System.String,System.String)">
            <summary>
            Constructs a British DateTime instance by parsing a string that contains a American date format e.g 11/19/2008
            </summary>
            <param name="dateTime">The type we are extending with this method</param>
            <param name="dateString">The string to parse in order to build the date</param>
            <param name="sourceStringDateFormat">The date format of the string to be parsed e.g. MM/dd/yyyy or MM-dd-yyyy </param>
            <returns>A nullable DateTime instance</returns>
        </member>
        <member name="M:DotNetLibrary.Utilities.Tools.Extensions.DateTimeExtensions.ParseBritishDateFromShortAmericanDateString(System.DateTime,System.String,System.String)">
            <summary>
            Constructs a British DateTime instance by parsing a string that contains a short American date format e.g 11/19/08
            </summary>
            <param name="dateTime">The type we are extending with this method</param>
            <param name="dateString">The string to parse in order to build the date</param>
            <param name="sourceStringDateFormat">The date format of the string to be parsed e.g. MM/dd/yy or MM-dd-yy</param>
            <returns>A nullable DateTime instance</returns>
        </member>
        <member name="T:DotNetLibrary.Utilities.Tools.Extensions.StringExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNetLibrary.Utilities.Tools.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Determines if a given string is null, empty or consists only of white space. 
            </summary>
            <param name="targetString">The string to test</param>
            <returns>True if the string is null, empty or consists of only whitespace</returns>
        </member>
        <member name="M:DotNetLibrary.Utilities.Tools.Extensions.StringExtensions.IsParsableAsValidMsSqlServerDate(System.String)">
            <summary>
            Determines if a given string is parsable as a valid Microsoft SQL Server date within the range 1753 and 9999.
            </summary>
            <param name="stringValue">The string to test</param>
            <returns>True if the string can be converted to a valid MS SQL Server date.</returns>
        </member>
        <member name="T:DotNetLibrary.Utilities.Tools.FileUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNetLibrary.Utilities.Tools.FileUtils.ReadAllLinesFromFile(System.String)">
            <summary>
            
            </summary>
            <param name="absoluteFilePath"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetLibrary.Utilities.Tools.DateUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNetLibrary.Utilities.Tools.DateUtils.ConvertAmericanDateToBritishDate(System.String)">
            <summary>
            
            </summary>
            <param name="americanDate"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetLibrary.Utilities.Tools.DateUtils.ParseShortBritishDateFromString(System.String)">
            <summary>
            
            </summary>
            <param name="dateString"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetLibrary.Utilities.Tools.DateUtils.IsValidSqlServerDate(System.String)">
            <summary>
            An better method to verify whether a value is 
            kosher for SQL Server datetime. This uses the native library
            for checking range values
            Borrowed from http://stackoverflow.com/questions/7054782/validate-datetime-before-inserting-it-into-sql-server-database
            </summary>
            <param name="someval">A date string that may parse</param>
            <returns>true if the parameter is valid for SQL Sever datetime</returns>
        </member>
        <member name="T:DotNetLibrary.Utilities.Tools.OperationResult">
            <summary>
            An OperationResult object is useful when you perform an operation and you need to return multiple  pieces of data from the operation
            For example, you might need to return a list of errors that occur as part of invoking the operation. You could use this class when saving stuff into storage
            either locally in a database or remotely in web service calls.
            </summary>
        </member>
        <member name="M:DotNetLibrary.Utilities.Tools.OperationResult.#ctor">
            <summary>
            We initially set Success to True on construction because we are optimistic that the operation will succeed.  Always remember to set Success
            to False as soon as errors are encountered when invoking the operation. 
            </summary>
        </member>
        <member name="P:DotNetLibrary.Utilities.Tools.OperationResult.Success">
            <summary>
            This flag communicates to the client whether the operation was a success or failure. It should be set to False if the operation failed. The
            client must always check this flag after invoking an operation which returns an OperationResult object in order to decide what to do next.
            </summary>
        </member>
        <member name="P:DotNetLibrary.Utilities.Tools.OperationResult.Messages">
            <summary>
            List of messages to return to the client. You would normally populate this list with error messages which occur when performing the operation.
            The client should then use these messages to communicate with the user e.g. display the messages as UI errors. Note, these messages must be sanitised 
            before being displayed on the UI, for example, do not add stack traces here since they will reveal sensitive information about the underlying sysytem.
            Stack traces are useless to users as well.
            </summary>
        </member>
        <member name="P:DotNetLibrary.Utilities.Tools.OperationResult.MessagesDictionary">
            <summary>
            This dictionary is useful if you wnat to return some objects back to the calling client. For example, suppose we were persisting a new record into the 
            database, we could add the entity which was just persisted into this dictionary should the client require it. e.g. 
             MessagesDictionary.Add("PersistedRecord", entity). The client would then have to cast it to the appropriate entity type when extracting it from the 
            dictionary.
            </summary>
        </member>
        <member name="M:DotNetLibrary.Utilities.Tools.OperationResult.AddMessage(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
    </members>
</doc>
